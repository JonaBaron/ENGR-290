//Selector sensor
const int type_sensor = 1; // 0 or 1 (US or IR)

// Constants for pin connections for US sensor
const int triggerPin = 11; // OC2A, pin D11
const int echoPin = 2;     // INT0, pin D2

volatile long duration = 0; // To store pulse width from Echo
volatile bool echoReceived = false;

//IR sensor
const int sensorPin = A2; // Analog input pin connected to the sensor's output

void setup() {
  // put your setup code here, to run once:

  set_text_monitor();

switch (type_sensor) {
  case 0:
 set_US_sensor();
    break;
  case 1:
  set_IR_sensor();
    break;
  default:
       break;
}

  set_light_board();

    // Enable global interrupts
  sei();
}

void loop() {
  // put your main code here, to run repeatedly:
long distance = 0; 

switch (type_sensor) {
  case 0:
    distance = US();
    break;
  case 1:
    distance = IR();
    break;
  default:
       break;
}

    String distanceString = String(distance); // Convert long to String
    printString(distanceString.c_str());
     printString("\n");

light(distance);

}




//------------------------------------------------------------------------------------------
//To print
//Print a string for the loop
void printString(const char* str) {
  while (*str) {
    while (!(UCSR0A & (1 << UDRE0))); // Wait for empty transmit buffer
    UDR0 = *str++;                    // Put data into buffer, sends the data
  }
}


// set up text transmitter
void set_text_monitor(){
    // Set the baud rate to 9600
  unsigned int baud = 9600;
  unsigned int ubrr = F_CPU / 16 / baud - 1;

  // Set the baud rate
  UBRR0H = (unsigned char)(ubrr >> 8); // Set baud rate high byte
  UBRR0L = (unsigned char)(ubrr);       // Set baud rate low byte

  // Enable receiver and transmitter
  UCSR0B = (1 << RXEN0) | (1 << TXEN0);

  // Set frame format: 8 data bits, 1 stop bit
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  }

  //------------------------------------------------------------------------------------------
  //To use US sensor

//Set a US sensor

void set_US_sensor(){
  // Set up the PWM signal on trigger pin (D11) using Timer2
  setupPWM();

  // Set up Timer1 for capturing echo pulse width
  setupTimer1();

  // Set up external interrupt on echo pin (D2)
  setupInterrupt();
}

ISR(INT0_vect) {
    if (PIND & (1 << PD2)) { // Echo pin HIGH
        TCNT1 = 0;          // Reset Timer1
        TCCR1B |= (1 << CS11); // Start Timer1
    } else { // Echo pin LOW
        TCCR1B &= ~(1 << CS11); // Stop Timer1
        duration = TCNT1; // Store pulse width
        echoReceived = true; // Set flag
    }
}


// Set up Timer2 for PWM generation on OC2A (D11)
void setupPWM() {
  DDRB |= (1 << DDB3);   // Set OC2A (D11) as output

  // Set Timer2 for Fast PWM, non-inverted on OC2A
  TCCR2A = (1 << WGM21) | (1 << WGM20) | (1 << COM2A1);
  TCCR2B = (1 << CS21);  // Prescaler of 8
  OCR2A = 100;           // Set the duty cycle (adjust as needed)
}

// Set up Timer1 to capture echo pulse width
void setupTimer1() {
  TCCR1A = 0;  // Normal operation (no PWM)
  TCCR1B = 0;  // Timer stopped initially
  TCNT1 = 0;   // Clear the counter
}

// Set up external interrupt on INT0 (D2)
void setupInterrupt() {
  EIMSK |= (1 << INT0);   // Enable external interrupt INT0
  EICRA |= (1 << ISC00);  // Trigger on any edge (rising/falling)
}

long US(){
  
   if (echoReceived) {
long distance = (duration * 0.5) * (0.034 / 2); // Convert to distance in cm


    // Output distance value over Serial
    //printString("Distance: ");
    String distanceString = String(distance); // Convert long to String
    //printString(distanceString.c_str()); 
    //printString(" cm\n");

    // Reset echo flag
    echoReceived = false;

    // Add a short delay between measurements
    _delay_ms(50);
    return distance;
  }}

//------------------------------------------------------------------------------------------
//set_up light

  void set_light_board(){
      // Set pin 11 (PB3) as output
  DDRB |= (1 << DDB3);
  DDRB |= (1 << DDB5);
  
  // Configure Timer2 for Fast PWM
  TCCR2A = (1 << WGM21) | (1 << WGM20) | (1 << COM2A1); // Fast PWM, non-inverting mode
  TCCR2B = (1 << CS20); // No prescaler
    
    }


    void light(long x){
      long ans = 0;

    if (x <= 15) {
        OCR2A = 0; // d1 or less
        flash();
    } else if (x >= 42) {
        OCR2A = 254; // d2 or more
        flash();
    } else {
        // Linearly increase from d1 to d2
        OCR2A = ((x - 15) * 254) / (42 - 15); // Scale to range [0, 254]
    }
      
      }

void flash(){
       
  // Turn the LED on
  PORTB |= (1 << PORTB5);
  delay(500);

  // Turn the LED off
  PORTB &= ~(1 << PORTB5);
  delay(500);
        
        }

        //------------------------------------------------------------------------------------------
  //To use IR sensor

void set_IR_sensor(){
    // Configure the ADC
  ADMUX = (1 << REFS0);  // Reference voltage set to AVcc (5V)
  ADCSRA = (1 << ADEN)   // Enable ADC
         | (1 << ADPS2)  // Set prescaler to 16 (for 16 MHz clock)
         | (1 << ADPS0); // This results in an ADC clock of 1 MHz

  }


uint16_t readADC(uint8_t pin) {
  // Select the appropriate input pin (analog pin number)
  ADMUX = (ADMUX & 0xF0) | (pin & 0x0F);  // Clear last 4 bits and set new pin
  ADCSRA |= (1 << ADSC);  // Start the conversion
  
  // Wait for the conversion to complete
  while (ADCSRA & (1 << ADSC));
  
  // Return the ADC value (10-bit resolution)
  return ADC;
}

float readSmoothVoltage(uint8_t pin, int samples) {
  float total = 0.0;
  for (int i = 0; i < samples; i++) {
    total += readADC(pin - A0) * 0.0048828125;  // Convert ADC to voltage
    delay(10);  // Small delay between readings
  }
  return total / samples;  // Return the average voltage
}

long IR(){

  float voltage = readSmoothVoltage(sensorPin, 10);
  
  
  float distance;
  
  
  // Finer piecewise linear mapping based on graph data
  if (voltage > 2.9 && voltage <= 3.0) {
    // 5 cm to 6 cm
    distance = 5 + (6 - 5) * (3.0 - voltage) / (3.0 - 2.9);
  }
  else if (voltage > 2.7 && voltage <= 2.9) {
    // 6 cm to 7 cm
    distance = 6 + (7 - 6) * (2.9 - voltage) / (2.9 - 2.7);
  }
  else if (voltage > 2.4 && voltage <= 2.7) {
    // 7 cm to 8 cm
    distance = 7 + (8 - 7) * (2.7 - voltage) / (2.7 - 2.4);
  }
  else if (voltage > 2.2 && voltage <= 2.4) {
    // 8 cm to 10 cm
    distance = 8 + (10 - 8) * (2.4 - voltage) / (2.4 - 2.2);
  }
  else if (voltage > 1.8 && voltage <= 2.2) {
    // 10 cm to 15 cm
    distance = 10 + (15 - 10) * (2.2 - voltage) / (2.2 - 1.8);
  }
  else if (voltage > 1.3 && voltage <= 1.8) {
    // 15 cm to 25 cm
    distance = 15 + (25 - 15) * (1.8 - voltage) / (1.8 - 1.3);
  }
  else if (voltage > 0.8 && voltage <= 1.3) {
    // 25 cm to 50 cm
    distance = 25 + (50 - 25) * (1.3 - voltage) / (1.3 - 0.8);
  }
  else if (voltage > 0.3 && voltage <= 0.8) {
    // 50 cm to 80 cm
    distance = 50 + (80 - 50) * (0.8 - voltage) / (0.8 - 0.3);
  }
  else {
    // Beyond 80 cm
    distance = 80;
  }
  
  // Wait for a short period before taking the next reading
  delay(100);
  return (int)distance; 

  }
